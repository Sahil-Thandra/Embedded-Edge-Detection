#include "mbed.h"

DigitalOut myled(LED_GREEN);
Serial pc(USBTX, USBRX);

int main()
{
    int rows = 32, cols = 32;
    int row = rows, col = cols;
    char c;
    int i = 0, j = 0;
    int imag[32][32]={242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 246 , 243 , 242 , 244 , 248 , 248 , 248 , 250 , 250 , 245 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 241 , 224 , 238 , 249 , 236 , 193 , 166 , 162 , 175 , 197 , 234 , 251 , 244 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 244 , 239 , 103 , 222 , 211 , 142 , 124 , 119 , 114 , 97 , 81 , 91 , 165 , 245 , 247 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 245 , 223 , 120 , 203 , 103 , 116 , 122 , 115 , 111 , 100 , 89 , 79 , 72 , 128 , 230 , 248 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 250 , 192 , 138 , 213 , 154 , 140 , 135 , 135 , 128 , 115 , 104 , 98 , 97 , 87 , 119 , 237 , 245 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 244 , 250 , 251 , 251 , 255 , 189 , 156 , 241 , 182 , 163 , 162 , 162 , 161 , 145 , 123 , 110 , 115 , 131 , 101 , 154 , 248 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 252 , 242 , 202 , 185 , 181 , 183 , 126 , 76 , 88 , 75 , 103 , 150 , 168 , 176 , 159 , 124 , 103 , 115 , 152 , 158 , 118 , 226 , 245 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 243 , 250 , 186 , 95 , 58 , 80 , 108 , 131 , 108 , 80 , 97 , 81 , 58 , 53 , 84 , 142 , 153 , 109 , 78 , 80 , 126 , 199 , 231 , 243 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 254 , 168 , 47 , 45 , 50 , 61 , 100 , 151 , 124 , 68 , 60 , 72 , 97 , 99 , 80 , 116 , 125 , 102 , 164 , 196 , 228 , 245 , 245 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 254 , 173 , 43 , 40 , 44 , 99 , 140 , 87 , 70 , 79 , 97 , 130 , 157 , 172 , 178 , 141 , 75 , 78 , 69 , 134 , 254 , 247 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 252 , 188 , 34 , 33 , 38 , 52 , 106 , 139 , 109 , 124 , 171 , 184 , 196 , 208 , 211 , 215 , 208 , 140 , 40 , 39 , 36 , 158 , 253 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 246 , 232 , 58 , 24 , 29 , 33 , 45 , 69 , 72 , 59 , 76 , 149 , 168 , 168 , 147 , 141 , 134 , 160 , 177 , 73 , 43 , 43 , 57 , 224 , 247 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 254 , 140 , 19 , 27 , 28 , 34 , 41 , 47 , 45 , 44 , 41 , 82 , 111 , 91 , 63 , 49 , 45 , 60 , 88 , 56 , 39 , 42 , 33 , 153 , 253 , 242 , 242 , 242 , 242 , 242 , 242 , 244 , 242 , 66 , 18 , 23 , 26 , 33 , 35 , 37 , 34 , 36 , 36 , 35 , 47 , 40 , 44 , 42 , 39 , 42 , 42 , 49 , 41 , 49 , 35 , 90 , 246 , 243 , 242 , 242 , 242 , 242 , 242 , 250 , 204 , 26 , 20 , 21 , 26 , 29 , 31 , 33 , 31 , 29 , 31 , 31 , 38 , 36 , 36 , 38 , 39 , 34 , 39 , 51 , 52 , 50 , 49 , 70 , 232 , 245 , 242 , 242 , 242 , 242 , 242 , 253 , 178 , 16 , 19 , 20 , 23 , 29 , 29 , 26 , 26 , 27 , 27 , 29 , 29 , 32 , 32 , 38 , 39 , 36 , 35 , 57 , 69 , 55 , 52 , 62 , 220 , 247 , 242 , 242 , 242 , 242 , 242 , 253 , 166 , 17 , 22 , 23 , 23 , 23 , 29 , 27 , 25 , 30 , 27 , 26 , 27 , 30 , 32 , 33 , 34 , 36 , 43 , 48 , 67 , 57 , 49 , 58 , 217 , 247 , 242 , 242 , 242 , 242 , 242 , 253 , 166 , 18 , 25 , 23 , 25 , 25 , 24 , 24 , 25 , 28 , 26 , 27 , 28 , 29 , 33 , 30 , 29 , 34 , 48 , 54 , 57 , 45 , 43 , 61 , 226 , 246 , 242 , 242 , 242 , 242 , 242 , 252 , 178 , 19 , 28 , 27 , 32 , 30 , 29 , 26 , 32 , 28 , 28 , 26 , 31 , 29 , 31 , 33 , 34 , 37 , 52 , 58 , 58 , 47 , 46 , 80 , 239 , 244 , 242 , 242 , 242 , 242 , 242 , 250 , 203 , 33 , 37 , 46 , 44 , 32 , 36 , 34 , 32 , 30 , 33 , 30 , 34 , 34 , 35 , 42 , 43 , 43 , 44 , 50 , 55 , 57 , 58 , 124 , 250 , 242 , 242 , 242 , 242 , 242 , 242 , 244 , 239 , 105 , 67 , 63 , 49 , 36 , 37 , 33 , 28 , 28 , 30 , 37 , 41 , 42 , 41 , 47 , 44 , 47 , 53 , 58 , 65 , 73 , 91 , 198 , 249 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 250 , 178 , 94 , 76 , 62 , 45 , 49 , 42 , 34 , 33 , 33 , 39 , 41 , 43 , 46 , 45 , 49 , 57 , 65 , 70 , 74 , 98 , 140 , 238 , 244 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 247 , 216 , 111 , 79 , 65 , 52 , 51 , 53 , 47 , 41 , 41 , 42 , 49 , 43 , 45 , 52 , 57 , 66 , 73 , 74 , 89 , 116 , 191 , 248 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 243 , 245 , 142 , 76 , 61 , 53 , 52 , 54 , 52 , 49 , 54 , 57 , 57 , 50 , 47 , 53 , 63 , 71 , 76 , 81 , 101 , 141 , 229 , 245 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 249 , 199 , 76 , 56 , 48 , 48 , 50 , 50 , 47 , 52 , 56 , 56 , 55 , 53 , 55 , 63 , 71 , 83 , 91 , 110 , 188 , 247 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 244 , 241 , 113 , 42 , 42 , 41 , 41 , 43 , 47 , 51 , 58 , 55 , 53 , 57 , 64 , 72 , 74 , 85 , 89 , 139 , 234 , 244 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 236 , 220 , 151 , 43 , 28 , 31 , 32 , 35 , 45 , 48 , 55 , 57 , 46 , 55 , 68 , 82 , 88 , 94 , 115 , 201 , 240 , 239 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 238 , 218 , 174 , 119 , 63 , 29 , 27 , 28 , 31 , 36 , 42 , 44 , 51 , 51 , 58 , 74 , 87 , 95 , 113 , 173 , 225 , 233 , 239 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 243 , 237 , 210 , 158 , 93 , 60 , 47 , 31 , 27 , 30 , 33 , 35 , 42 , 48 , 54 , 62 , 70 , 75 , 69 , 121 , 199 , 224 , 235 , 241 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 241 , 228 , 193 , 141 , 96 , 66 , 47 , 37 , 31 , 31 , 32 , 40 , 40 , 41 , 38 , 39 , 52 , 101 , 178 , 220 , 233 , 240 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 234 , 215 , 185 , 152 , 122 , 98 , 80 , 68 , 59 , 55 , 59 , 76 , 97 , 129 , 175 , 215 , 232 , 238 , 241 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 243 , 243 , 237 , 227 , 214 , 203 , 194 , 189 , 187 , 191 , 203 , 219 , 231 , 238 , 241 , 241 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242 , 242};
    int outImag[32][32];
    for(i = 0; i < row; i++) {
        for(int j = 0; j < col; j++) {
            int result = 4*imag[i][j];
            if(i+1 < row) {
                result += (-1)*imag[i+1][j];
            }
            if(i-1 > 0) {
                result += (-1)*imag[i-1][j];
            }
            if(j+1 < col) {
                result += (-1)*imag[i][j+1];
            }
            if(j > 0) {
                result += (-1)*imag[i][j-1];
            }
            if(result < 0) result = result*(-1);
            result = result/8;
            outImag[i][j] = result;
        }
    }
    
    for(int j = 0; j < rows*cols; j++) {
        wait(0.01f); // wait a small period of time
        char cc = outImag[j/rows][j%cols];
        pc.printf("%c", cc); // print the value of variable i
        myled = !myled; // toggle a led
    }
}
